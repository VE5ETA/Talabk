{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hnodi\\\\Desktop\\\\project\\\\Talabk\\\\client\\\\src\\\\Auth\\\\RequireAuth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport { Navigate, Outlet } from \"react-router-dom\";\nimport Login from \"../pages/Login\";\nimport { AuthContext } from \"./AuthContext\"; // this function is protect critical page\n// get user role from context and check if admin or not\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RequireAuth() {\n  _s();\n\n  const {\n    isLoggedIn\n  } = useContext(AuthContext);\n  return isLoggedIn ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 23\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 50\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 36\n  }, this);\n}\n\n_s(RequireAuth, \"k0eKnAnvTWhpQrZ9lRleN6NVN6Y=\");\n\n_c = RequireAuth;\n\nvar _c;\n\n$RefreshReg$(_c, \"RequireAuth\");","map":{"version":3,"sources":["C:/Users/hnodi/Desktop/project/Talabk/client/src/Auth/RequireAuth.js"],"names":["React","useContext","Navigate","Outlet","Login","AuthContext","RequireAuth","isLoggedIn"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,kBAAjC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B,C,CAEA;AACA;;;AACA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAiBN,UAAU,CAACI,WAAD,CAAjC;AAEA,SAAOE,UAAU,gBAAG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,UAAH,gBAAgB,QAAC,QAAD;AAAU,IAAA,EAAE,eAAE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAd;AAAA;AAAA;AAAA;AAAA,UAAjC;AACD;;GAJuBD,W;;KAAAA,W","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { Navigate, Outlet } from \"react-router-dom\";\r\nimport Login from \"../pages/Login\";\r\nimport { AuthContext } from \"./AuthContext\";\r\n\r\n// this function is protect critical page\r\n// get user role from context and check if admin or not\r\nexport default function RequireAuth() {\r\n  const { isLoggedIn } = useContext(AuthContext);\r\n\r\n  return isLoggedIn ? <Outlet /> : <Navigate to={<Login />} />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}